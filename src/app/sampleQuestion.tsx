export const questions = [
    {
        ID:           "1001",
        Title:        "Calculate Sum of Large Numbers",
        Description:  "Write a function to compute the sum of two extremely large integers. These integers can each have up to 10^6 digits, which poses a significant challenge in terms of handling and processing such large numbers. The solution must be able to efficiently manage arithmetic operations involving big integers and return the sum as a string. Traditional integer data types will not suffice due to their size limitations, so you must use algorithms or data structures designed for arbitrary-precision arithmetic. Consider edge cases such as very large numbers with leading zeros, and ensure that the function can handle inputs of varying lengths gracefully. Your implementation should be optimized for performance and memory usage, avoiding overflow errors and ensuring that the sum is calculated accurately within reasonable time limits.",
        InputFormat:  "Two strings, each representing a large integer. Each integer can have up to 10^6 digits. The two strings are provided on separate lines.",
        Points:       "30",
        Round:        "1",
        Constraints:  "0 ≤ length of each integer ≤ 10^6 digits",
        OutputFormat: "A string representing the sum of the two integers. The result should be formatted without any leading zeros, except if the result is zero.",
    },
    {
        ID:           "1002",
        Title:        "Advanced String Reversal",
        Description:  "Develop a function to reverse a given string that may include uppercase and lowercase letters, digits, and special characters. The length of the string can be up to 10^5 characters, so your solution must be optimized for both time and space efficiency. The function should correctly reverse all characters in the string, taking into account different types of characters and ensuring that no information is lost or altered during the reversal process. Edge cases to consider include empty strings, strings with only one character, and strings that include a mixture of different character types. Additionally, the function should be robust enough to handle any string length up to the specified limit without performance degradation.",
        InputFormat:  "A single string containing letters, digits, and special characters. The string's length can be up to 10^5 characters.",
        Points:       "25",
        Round:        "1",
        Constraints:  "Length of the string ≤ 10^5",
        OutputFormat: "The reversed string, preserving all characters and their original order as reversed.",
    },
    {
        ID:           "1003",
        Title:        "Efficient Fibonacci Sequence Calculation",
        Description:  "Implement a function to calculate the nth Fibonacci number, where n can be as large as 10^7. A naive recursive approach will be highly inefficient for such large values, so you need to use an optimized algorithm to compute the result efficiently. Consider algorithms like matrix exponentiation or dynamic programming with memoization to achieve this. The function should handle large values of n quickly and avoid excessive memory usage. Additionally, it should be able to provide results within a reasonable time frame for the maximum input size, ensuring accuracy and efficiency. Think about edge cases where n is very small or very large and how the algorithm should handle these scenarios.",
        InputFormat:  "A single integer n, where 0 ≤ n ≤ 10^7.",
        Points:       "35",
        Round:        "2",
        Constraints:  "0 ≤ n ≤ 10^7",
        OutputFormat: "The nth Fibonacci number, computed efficiently even for very large values of n.",
    },
    {
        ID:           "1004",
        Title:        "Prime Number Generator",
        Description:  "Design a function to generate all prime numbers up to a given integer N using the Sieve of Eratosthenes algorithm. The function should be able to handle large values of N, up to 10^6, and return a list of all prime numbers up to N. This requires an efficient implementation that minimizes memory usage and maximizes performance. Your solution should include handling edge cases such as very small values of N, where there are fewer primes, and very large values, where memory management becomes crucial. Ensure that the algorithm is optimized to handle the maximum constraints and provides accurate results quickly. Additionally, explain the choice of algorithm and its advantages in handling large datasets.",
        InputFormat:  "A single integer N, where 1 ≤ N ≤ 10^6.",
        Points:       "40",
        Round:        "2",
        Constraints:  "1 ≤ N ≤ 10^6",
        OutputFormat: "A list of all prime numbers less than or equal to N, sorted in ascending order.",
    },
    {
        ID:           "1005",
        Title:        "Advanced Sorting Algorithms",
        Description:  "Implement a function to sort an array of integers using both comparison-based and non-comparison-based sorting algorithms. The array can contain up to 10^6 elements. Provide implementations for comparison-based sorting algorithms like quicksort or mergesort and non-comparison-based algorithms like radix sort or counting sort. Your solution should compare the performance of these algorithms in terms of time complexity and memory usage, and provide a detailed analysis of their advantages and limitations. Ensure that your implementations are efficient and capable of handling large input sizes within reasonable time constraints. Consider various edge cases, such as arrays with repeated elements or arrays that are already sorted.",
        InputFormat:  "An array of integers, with a length up to 10^6 elements.",
        Points:       "50",
        Round:        "3",
        Constraints:  "Array length ≤ 10^6",
        OutputFormat: "The sorted array, with all elements arranged in ascending order.",
    },
    {
        ID:           "1006",
        Title:        "Find Maximum in Large List",
        Description:  "Write a function to find the maximum number from a very large list of integers, with a length of up to 10^6 elements. The function should be optimized to handle large datasets efficiently, focusing on minimizing both time and space complexity. Ensure that your solution can handle edge cases, such as lists with duplicate values, very large integers, or lists that are almost sorted. The function should operate within reasonable time limits for the maximum input size and return the largest integer in the list accurately. Consider how the function handles memory usage and performance under different scenarios.",
        InputFormat:  "A list of integers, with a maximum length of 10^6 elements.",
        Points:       "20",
        Round:        "1",
        Constraints:  "List length ≤ 10^6",
        OutputFormat: "The maximum integer from the list, determined efficiently.",
    },
    {
        ID:           "1007",
        Title:        "Matrix Multiplication with Constraints",
        Description:  "Develop a function to perform matrix multiplication on two matrices, each with dimensions up to 500x500. Your implementation should be able to handle large matrices efficiently, considering both time and memory constraints. The function should accurately compute the resulting matrix and be optimized to handle matrices of the maximum size within a reasonable time frame. Make sure to consider edge cases such as matrices with all zeros or ones, and how these cases might impact performance. Provide explanations for the algorithm used and discuss its efficiency in handling large matrix dimensions.",
        InputFormat:  "Two matrices A and B, each with dimensions up to 500x500.",
        Points:       "45",
        Round:        "3",
        Constraints:  "Matrix dimensions ≤ 500x500",
        OutputFormat: "The resulting matrix after performing the multiplication.",
    },
    {
        ID:           "1008",
        Title:        "Complex Palindrome Checker",
        Description:  "Create a function to check if a string is a palindrome, considering that the string can include letters, digits, and special characters. The function should process the string by ignoring spaces, punctuation, and case differences. The length of the string can be up to 10^5 characters, so your solution must be optimized for efficiency. Handle edge cases such as empty strings, single characters, and very large strings gracefully. The function should accurately determine if the processed string reads the same forwards and backwards, and provide the result in a clear and concise format.",
        InputFormat:  "A single string containing letters, digits, and special characters. The string's length can be up to 10^5 characters.",
        Points:       "30",
        Round:        "2",
        Constraints:  "Length of the string ≤ 10^5",
        OutputFormat: "Yes if the processed string is a palindrome, No otherwise.",
    },
    {
        ID:           "1009",
        Title:        "GCD of Very Large Numbers",
        Description:  "Write a function to compute the greatest common divisor (GCD) of two very large numbers, each having up to 10^6 digits. Given the potential size of the numbers, the function must use an efficient algorithm like the Euclidean algorithm to compute the GCD. The implementation should handle large integers effectively, ensuring accuracy and efficiency. Consider edge cases such as one of the numbers being zero or the numbers being very close to each other. The function should operate within reasonable time limits and provide the result as a string.",
        InputFormat:  "Two strings, each representing a large integer with up to 10^6 digits. Each integer is provided on a separate line.",
        Points:       "30",
        Round:        "2",
        Constraints:  "0 ≤ length of each integer ≤ 10^6 digits",
        OutputFormat: "A string representing the GCD of the two integers.",
    },
];
